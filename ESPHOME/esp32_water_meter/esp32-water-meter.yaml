esphome:
  name: esp32-water-meter
  friendly_name: esp32-water-meter
  
esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

ota:
  - platform: esphome
    password: "XXXXXXXXXXXXXXXXXXXXXXXX"

wifi:
  ssid: XXXXXXXXXXXXXXXX
  password: XXXXXXXXXXXXXX

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "esp32-water-meter Fallback Hotspot"
    password: "XXXXXXXXXXXXXX"
    
web_server:
  port: 80
  
# Si no usas la api de Homeassitant se debe habilitar el bloque mqtt y deshabilitar el de api
# Example configuration entry
#mqtt:
#  broker: 10.0.0.2
#  username: livingroom
#  password: XXXXXXXXX  

captive_portal:

sensor:
  # SENSOR 1 ‚Äì Voltaje crudo le√≠do desde la boya resistiva
  - platform: adc
    pin: GPIO01                  # üìç Pin anal√≥gico del ESP32 conectado al divisor de tensi√≥n
    name: "voltaje boya"
    id: voltaje_boya
    attenuation: 12db            # üéöÔ∏è Configura el rango de lectura del ADC (12‚ÄØdB = m√°x. 3.3‚ÄØV)
    update_interval: 5s          # ‚è±Ô∏è Cada cu√°ntos segundos se hace una medici√≥n
    accuracy_decimals: 2         # üîç Solo muestra 2 decimales para evitar ruido excesivo
    filters:
      - exponential_moving_average:
          alpha: 0.05            # üìä Suaviza variaciones r√°pidas para una lectura m√°s estable
          send_every: 1

  # SENSOR 2 ‚Äì Porcentaje de agua calculado linealmente a partir del voltaje
  - platform: template
    name: "nivel de agua ESP"
    update_interval: 5s
    unit_of_measurement: "%"
    accuracy_decimals: 1
    lambda: |-
      // Leer el voltaje actual, redondear a 2 decimales
      float v = round(id(voltaje_boya).state * 100.0f) / 100.0f;
      float porcentaje = 0.0f;

      // Ajustar aqu√≠ el valor m√°ximo de voltaje seg√∫n la resistencia y boya usada
      float voltaje_maximo = 1.622f; // üîÅ CAMBIAR si en tu boya el m√°ximo es distinto

      // Calcular porcentaje lineal entre 0 V (0%) y voltaje_maximo (100%)
      //porcentaje = (v / voltaje_maximo) * 100.0f;

      // Limitar el resultado a entre 0% y 100%
      //porcentaje = std::min(std::max(porcentaje, 0.0f), 100.0f);
      porcentaje = (v) / (1.622) * 100.0f;
      // Mostrar en logs de Home Assistant
      ESP_LOGD("custom", "Voltaje le√≠do: %.2f V ‚Üí %.1f %%", v, porcentaje);
      return porcentaje;
  # SENSOR 2 ‚Äì Porcentaje de agua calculado linealmente a partir del voltaje
 # Sensor en pruebas al comprobar que el Voltaje no es linea debido al divisor de tension y que una de sus variables varia, por lo cual es mejor calcular el valor de la resistencia.
  - platform: template
    name: "nivel de agua resistencia ESP"
    update_interval: 5s
    id: resistencia_boya
    unit_of_measurement: "Œ©"
    accuracy_decimals: 1
    lambda: |-
      // Leer el voltaje actual, redondear a 2 decimales
      
      float V = id(voltaje_boya).state;
      float resistencia=(V * 200.0) / (3.3 - V);
      return resistencia;
# Sensor en pruebas al comprobar que el Voltaje no es linea debido al divisor de tension y que una de sus variables varia, por lo cual es mejor calcular el valor de la resistencia.
  - platform: template
    name: "nivel de agua resistivo %  ESP"
    update_interval: 5s
    unit_of_measurement: "%"
    accuracy_decimals: 1
    lambda: |-
      // Leer el voltaje actual, redondear a 2 decimales
      float resistencia= id(resistencia_boya).state;
      float porcentaje = 0.0f;
      porcentaje = ((resistencia) / (196)) * 100.0;
      // Mostrar en logs de Home Assistant
      ESP_LOGD("custom", "Voltaje le√≠do: %.2f Œ© ‚Üí %.1f %%", resistencia, porcentaje);
      return porcentaje;
