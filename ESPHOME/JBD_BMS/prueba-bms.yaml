substitutions:
   name: "bateria-bms"
   device_description: "Monitor Battery "
   external_components_source: github://syssi/esphome-jbd-bms@main
   mac_address: a5:c2:37:2e:27:e6

esphome:
   name: ${name}
   comment: ${device_description}
   min_version: 2024.6.0
   project:
      name: "syssi.esphome-jbd-bms"
      version: 2.0.0

esp32:
   board: wemos_d1_mini32
   framework:
      type: esp-idf

external_components:
   - source: ${external_components_source}
     refresh: 0s

wifi:
  networks:
  - ssid: "MI_WIFI"
    password: "PASSWORD"

  ap: #Esto es para que el ESP cree un AP de conexi√≥n en caso de no poderse conectar al WIFI configurado
    ssid: "AP_BMS"
    password: "APBMS00."

web_server:
   port: 80

api:
   encryption:
      key: "" # API de HomeAssistant, si no tienes Home Assistant puedes eliminar el bloque api

ota:
   - platform: esphome
     password: "" #Password para actualizar mediante wifi, se puede eliminar el bloque

logger:
   level: DEBUG

esp32_ble_tracker:
   scan_parameters:
      active: true # Cambiado a true

ble_client:
   - id: client0
     mac_address: ${mac_address}

jbd_bms_ble:
   - id: bms0
     ble_client_id: client0
     update_interval: 10s # Aumentado a 10s

i2c:
   sda: GPIO21
   scl: GPIO22
   scan: true

spi:
   - id: spi_tft
     clk_pin: GPIO14
     mosi_pin: GPIO13
     miso_pin: GPIO12

output:
   - platform: ledc
     pin: GPIO27
     id: former_led_pin
   - platform: ledc
     id: output_red
     pin: GPIO4
     inverted: true
   - platform: ledc
     id: output_green
     pin: GPIO16
     inverted: true
   - platform: ledc
     id: output_blue
     pin: GPIO17
     inverted: true
   - platform: ledc
     pin: GPIO1
     id: backlight

light:
   - platform: monochromatic
     output: backlight
     name: "Backlight Light"
     restore_mode: ALWAYS_ON
     id: backlight_light
   - platform: monochromatic
     output: former_led_pin
     name: "Display Backlight"
     id: back_light
     restore_mode: ALWAYS_ON
   - platform: rgb
     name: LED
     id: led
     red: output_red
     green: output_green
     blue: output_blue
     restore_mode: ALWAYS_OFF

binary_sensor:
   - platform: jbd_bms_ble
     jbd_bms_ble_id: bms0
     balancing:
        name: "${name} balanceando"
        id: balancing
     charging:
        name: "${name} MOS carga"
        id: charging
     discharging:
        name: "${name} MOS descarga"
        id: discharging
   - platform: status
     name: "Node Status"
     id: system_status

sensor:
   - platform: wifi_signal
     internal: True
     id: wifi_signal_sensor
     update_interval: 5s
   - platform: jbd_bms_ble
     jbd_bms_ble_id: bms0
     current:
        name: "${name} current"
        id: bms_current
     power:
        name: "${name} power"
        id: bms_power
     state_of_charge:
        name: "${name} state of charge"
        id: bms_soc
     total_voltage:
        name: "${name} total voltage"
        id: bms_voltage
     temperature_1:
        name: "${name} temperature 1"
        id: bms_temp
     charging_power:
        name: "${name} charging power"
        id: charging_power
     discharging_power:
        name: "${name} discharging power"
        id: discharging_power
     capacity_remaining:
        name: "${name} capacity remaining"
        id: remaining
     min_cell_voltage:
        name: "${name} min cell voltage"
     max_cell_voltage:
        name: "${name} max cell voltage"
     cell_voltage_1:
        name: "${name} cell voltage 1"
        id: voltage1
     cell_voltage_2:
        name: "${name} cell voltage 2"
        id: voltage2
     cell_voltage_3:
        name: "${name} cell voltage 3"
        id: voltage3
     cell_voltage_4:
        name: "${name} cell voltage 4"
        id: voltage4

switch:
   - platform: restart
     name: ESP32-2432S028 Restart
   - platform: jbd_bms_ble
     jbd_bms_ble_id: bms0
     charging:
        name: "${name} MOS carga"
        id: swcarga
     discharging:
        name: "${name} MOS descarga"
        id: swdescarga

color:
   - id: my_red
     red: 100%
     green: 0%
     blue: 0%
   - id: my_orange
     red: 100%
     green: 50%
     blue: 0%
   - id: my_yellow
     red: 100%
     green: 100%
     blue: 0%
   - id: my_green
     red: 0%
     green: 100%
     blue: 0%
   - id: my_blue
     red: 0%
     green: 0%
     blue: 100%
   - id: my_teal
     red: 0%
     green: 100%
     blue: 100%
   - id: my_gray
     red: 70%
     green: 70%
     blue: 70%
   - id: my_white
     red: 100%
     green: 100%
     blue: 100%

font:
   - file: "Helvetica.ttf"
     id: helvetica_48
     size: 48
   - file: "Helvetica.ttf"
     id: helvetica_24
     size: 24
   - file: "Helvetica.ttf"
     id: helvetica_12
     size: 12

time:
   - platform: homeassistant
     id: esptime

text_sensor:
   - platform: wifi_info
     ip_address:
        id: ip_address

display:
   - platform: ili9xxx
     rotation: 270
     model: TFT 2.4
     spi_id: spi_tft
     cs_pin: 15
     dc_pin: 2
     color_palette: 8BIT
     invert_colors: false
     lambda: |-
        int hs = it.get_width() / 2; // Horizontal Spacing = text data horizontal center point
        int hq = it.get_width() / 4; // text data horizontal center for two vertical lines
        int vs = it.get_height() / 16; // Vertical Center = text data vertical center point = how many lines
        int line_gap = 21; // distance of line from center of data text
        it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
        it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));

        it.strftime(5, 5, id(helvetica_12), id(my_white), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());
        it.print(hs, 5, id(helvetica_12), id(my_blue), TextAlign::TOP_CENTER, "${name}"); //print title  

        if (id(system_status).state) {
          it.print(it.get_width()-5, 5, id(helvetica_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
        }
        else {
          it.print(it.get_width()-5, 5, id(helvetica_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
        }
        it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); // line across bottom above footer text
        it.printf(hs, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
        it.printf(it.get_width()-5, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_RIGHT, "%s", id(ip_address).state.c_str());

        it.line(0, vs * 3, it.get_width(), vs * 3, id(my_blue));
        it.print(hs, vs * 3 + line_gap, id(helvetica_24), id(my_white), TextAlign::CENTER, "BMS");
        it.line(0, vs * 4, it.get_width(), vs * 4, id(my_blue));
        it.print(hq, vs * 5, id(helvetica_12), id(my_white), TextAlign::CENTER, "Current:");
        it.printf(3*hq, vs * 5, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.1fA", id(bms_current).state);
        it.print(hq, vs * 6, id(helvetica_12), id(my_white), TextAlign::CENTER, "Voltaje:");
        it.printf(3*hq, vs * 6, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.2fV", id(bms_voltage).state); // Cambiado a %.2fV
        it.print(hq, vs * 7, id(helvetica_12), id(my_white), TextAlign::CENTER, "Remaining:");
        it.printf(3*hq, vs * 7, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.0f", id(remaining).state);
        it.print(hq, vs * 8, id(helvetica_12), id(my_white), TextAlign::CENTER, "Power:");
        it.printf(3*hq, vs * 8, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.0fW", id(bms_power).state);
        it.print(hq, vs * 9, id(helvetica_12), id(my_white), TextAlign::CENTER, "Celda1:");
        it.printf(3*hq, vs * 9, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.2fV", id(voltage1).state); // Cambiado a %.2fV
        it.print(hq, vs * 10, id(helvetica_12), id(my_white), TextAlign::CENTER, "Celda2:");
        it.printf(3*hq, vs * 10, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.2fV", id(voltage2).state); // Cambiado a %.2fV
        it.print(hq, vs * 11, id(helvetica_12), id(my_white), TextAlign::CENTER, "Celda3:");
        it.printf(3*hq, vs * 11, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.2fV", id(voltage3).state); // Cambiado a %.2fV
        it.print(hq, vs * 12, id(helvetica_12), id(my_white), TextAlign::CENTER, "Celda4:");
        it.printf(3*hq, vs * 12, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.2fV", id(voltage4).state); // Cambiado a %.2fV
